# Check Point - Playground

```elixir
Mix.install(
  [
    {:check_point, path: Path.join(__DIR__, ".."), env: :dev},
    {:ecto_sql, "~> 3.0"}
  ],
  config_path: :check_point,
  lockfile: :check_point
)
```

## Database

```elixir
require Ecto.Query
alias CheckPoint.{Checks, Repo}
```

```elixir
Repo.delete_all(Checks.Check)
Repo.delete_all(Checks.Contact)
:ok
```

Create a contact

```elixir
contact = %{
  name: "rbart",
  description: "Randy Bartels",
  type: "email",
  detail: "jrb@codingp.com"
}

{res, my_contact} = Checks.create_contact(contact)
```

Add a check

```elixir
check = %{
  description: "test",
  action: "green",
  args: "",
  name: "rbart",
  contact_id: my_contact.id
}

# {res, my_check} = Checks.create_check(check)
```

Now play around with the database

```elixir
Checks.list_contacts() |> Repo.preload(:checks)
```

```elixir
Checks.list_checks() |> Repo.preload(:contact)
```

```elixir
Checks.create_check(%{
  description: "Google",
  args: "google.com",
  contact: my_contact.name
})
```

```elixir
Checks.find_check(%{contact: %{name: my_contact.name}})
```

```elixir
Checks.create_check(Map.put(check, :contact, %{name: contact.name}))
```

## Escalate Section

```elixir
res = Task.start(CheckPoint.Escalate, :run, ["test"])
```

```elixir
{_, pid} = res
:sys.get_status(pid)
```

```elixir
CheckPoint.Escalate.alert(:err, "test", 0)
```

```elixir
Registry.count(CheckPoint.EscalateReg)
```

## Worker Section

```elixir
chils = Supervisor.which_children(CheckPoint.DynSup)
```

```elixir
for {_, pid, _, _} <- chils, do: :sys.get_state(pid)
```

```elixir
dpid = Process.whereis(CheckPoint.DynSup)
:sys.get_status(dpid)
```

```elixir
rpid = Process.whereis(CheckPoint.WorkerReg)
:sys.get_state(rpid)
```

```elixir
lis =
  for num <- 0..9 do
    CheckPoint.Worker.check("worker#{num}", fn _x -> :down end, args: 0)
  end
```

```elixir
# wlis =
# for num <- 0..9 do
#  DynamicSupervisor.start_child(
#   CheckPoint.DynSup,
#  {CheckPoint.Worker, val: 0, delay: 5, args: :ip, name: "worker#{num}"}
# )
# end
```

```elixir
[{wk, _} | _] = Registry.lookup(CheckPoint.WorkerReg, "worker0")
```

```elixir
:sys.get_state(wk)
```

```elixir
:sys.get_status(wk)
```

```elixir
GenServer.stop(wk, :error)
```

```elixir
Supervisor.stop(CheckPoint.DynSup)
```
