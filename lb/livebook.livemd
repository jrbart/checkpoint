# Check Point - Playground

```elixir
Mix.install(
  [
    {:check_point, path: Path.join(__DIR__, ".."), env: :dev},
    {:ecto_sql, "~> 3.0"}
  ],
  config_path: :check_point,
  lockfile: :check_point
)
```

## Database

```elixir
require Ecto.Query
alias CheckPoint.{Checks, Repo}
```

```elixir
check = %Checks.Check{description: "Test Check", args: ":ok", opts: "delay: 5000"}

:ok
```

```elixir
Repo.delete_all(Checks.Contact)
Repo.delete_all(Checks.Check)
:ok
```

Create a contact

```elixir
contact = %{
  name: "rbart",
  description: "Randy Bartels",
  type: "email",
  detail: "jrb@codingp.com"
}

{:ok, my_contact} = Repo.insert(contact)
```

## Escalate Section

```elixir
res = Task.start(CheckPoint.Escalate, :run, ["test"])
```

```elixir
{_, pid} = res
:sys.get_status(pid)
```

```elixir
CheckPoint.Escalate.alert(:err, "test", 0)
```

```elixir
Registry.count(CheckPoint.EscalateReg)
```

## Worker Section

```elixir
chils = Supervisor.which_children(CheckPoint.DynSup)
```

```elixir
for {_, pid, _, _} <- chils, do: :sys.get_state(pid)
```

```elixir
dpid = Process.whereis(CheckPoint.DynSup)
:sys.get_status(dpid)
```

```elixir
rpid = Process.whereis(CheckPoint.WorkerReg)
:sys.get_state(rpid)
```

```elixir
wlis =
  for num <- 0..9 do
    DynamicSupervisor.start_child(
      CheckPoint.DynSup,
      {CheckPoint.Worker, val: 0, delay: 5, args: :ip, name: "worker#{num}"}
    )
  end
```

```elixir
[{wk, _} | _] = Registry.lookup(CheckPoint.WorkerReg, "worker0")
```

```elixir
:sys.get_state(wk)
```

```elixir
GenServer.stop(wk, :error)
```

```elixir
Supervisor.stop(CheckPoint.DynSup)
```
